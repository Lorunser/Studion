@model Studion.ViewModels.UsersProfileViewModel
@using Microsoft.AspNet.Identity


@{
    ViewBag.Title = "ProfilePage";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="jumbotron">
    <h2>Profile page for <b>@Model.UserName</b></h2>
    <div class="row">
        <table class="table">
            <tr>
                <th>Notes published</th>
                <th>Notes rated</th>
                <th>Comments made</th>
                <th>Total downloads</th>
                <th>Average note rating</th>
            </tr>
            <tr>
                <td>@Model.NumNotesPublished</td>
                <td>@Model.NumNotesRated</td>
                <td>@Model.NumCommentsMade</td>
                <td>@Model.TotalDownloads</td>
                <td>@Model.AverageNoteRating</td>
            </tr>
        </table>
    </div>
    <div class="row">
        <h3 class="col-md-offset-4 col-md-4">
            <span class="label label-primary center-block">
                <b>@Model.GetUserScore()</b> user score
            </span>
        </h3>
    </div>
</div>

<div>

    <!-- Nav tabs -->
    <ul class="nav nav-tabs nav-justified" role="tablist">
        <li role="presentation" class="active"><a href="#published" aria-controls="published" role="tab" data-toggle="tab">Published Notes</a></li>
        <li role="presentation"><a href="#bio" aria-controls="bio" role="tab" data-toggle="tab">Bio</a></li>
        @if (User.Identity.GetUserId() == Model.UserID)
        {
            <li role="presentation"><a href="#manage" aria-controls="manage" role="tab" data-toggle="tab">Manage</a></li>
        }
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">
        <div role="tabpanel" class="tab-pane active" id="published">
            <div class="row container">
                <table id="note-table" class="display table table-striped" style="width:100%">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Subject</th>
                            <th>Level</th>
                            <th>Exam Board</th>
                            <th>Uploaded</th>
                            <th>Downloads</th>
                            <th>Av. Rating</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
        <div role="tabpanel" class="tab-pane" id="bio">
            <h3>Feature coming soon</h3>
        </div>
        @if (User.Identity.GetUserId() == Model.UserID)
        {
            <div role="tabpanel" class="tab-pane" id="manage">
                <a href="@Url.Action("Index", "Manage")">Manage account</a>
            </div>
        }
    </div>

</div>

@section scripts
{
    <script>
        $(document).ready(function () {
            //retrieve table
            var table = $('#note-table');

            var params = {};
            params.subjectID = null;
            params.levelID = null;
            params.examBoardID = null;
            params.authorID = '@Model.UserID';

            //instantiate          
            table.DataTable({
                destroy: true,

                ajax: {
                    type: 'GET',
                    url: '/api/notes/search',
                    data: params,
                    dataSrc: ""
                },

                columns: [
                    {
                        data: "title",
                        render: function (data, type, note) {
                            return "<a href='/notes/display/" + note.noteID + "'>" + note.title + "</a>";
                        }
                    },
                    {
                        data: "subjectName"
                    },
                    {
                        data: "levelName"
                    },
                    {
                        data: "examBoardName"
                    },
                    {
                        data: "uploadTime",
                        render: function (data, type) {
                            if (type === "sort" || type === "type") {
                                return data;
                            }
                            return moment(data).format("MMMM YYYY")
                        }
                    },
                    {
                        data: "downloads"
                    },
                    {
                        data: "averageRating"
                    }
                ]
            });
        });
    </script>
}


